{"version":3,"sources":["County/Constants.js","Navbar.js","County/EconomyPanel.js","County/ElectionPanel.js","County/helper.js","County/CountyFinder.js","County/County.js","Map/Choropleth.js","Map/YearDropdown.js","Map/CmpDropdown.js","Map/CmpInput.js","Map/VariableDropdown.js","Map/FilterCheckbox.js","Map/Map.js","Graph.js","Trends.js","App.js","serviceWorker.js","index.js"],"names":["PLACEHOLDER_GDP_DATA","Array","fill","PLACEHOLDER_TOP_INDUSTRY","from","length","PLACEHOLDER_GROWING_INDUSTRY","PLACEHOLDER_ELECTION_RESULT","PLACEHOLDER_STATE_GDP_RANK","PLACEHOLDER_GDP_GROWTH_PERCENTILE","PLACEHOLDER_COUNTY_VOTING_FOR_PARTY","PLACEHOLDER_NUM_COUNTY_IN_STATE","PLACEHOLDER_COUNTY_NAME","PLACEHOLDER_COUNTY_STATE","CANDIDATE_IMAGE","INDUSTRY_ICON","STATES","Navbar","linkStyle","padding","fontSize","color","className","style","top","width","background","textAlign","id","href","process","EconomyPanel","props","state","gdpData","this","topIndustry","fastestGrowthIndustry","growthChartData","type","label","i","push","paddingBottom","toFixed","Math","pow","alt","stateGDPRank","GDPGrowthPercentile","chartType","loader","data","options","legend","vAxis","title","map","value","index","maxIndustryPct","pct","key","max","round","maxGrowthPct","parseFloat","React","Component","ElectionPanel","electionResult","preference","weight","repWinCount","forEach","totalVote","parseInt","repPct","min","getPartyPreference","stats","demWinCount","demWinLead","repWinLead","totalVote2001","totalVote2012","totalVote2016","demPct","getStats","colSpan","backgroundImage","marginLeft","countyName","countyState","countyVotingForParty","numCountyInState","demBarWidth","isNaN","repBarWidth","console","log","src","marginRight","CountyFinder","ERR","err","getCounties","fetch","ENDPOINT","concat","then","res","json","rows","undefined","setState","counties","fipsNameList","county","NAME","onClick","getNewCounty","FIPS","C","require","config","API_HOST","REACT_APP_API_HOST","API_PORT","REACT_APP_API_PORT","County","fips","ERR_HANDLER","row","document","window","history","pushState","getElementById","scrollIntoView","keys","d_dem","d_rep","growingIndustry","percentile","rank","match","params","Plotly","register","y","Plot","createPlotlyComponent","Choropleth","topIndustryColorscale","names","z","industries","nonAggregateIndustries","nonAggregateIndIDs","topIndustryColorbar","customdata","colorscale","zmin","zmax","zauto","height","year","queryURL","filter","filterYear","operand","val","industry","hovertemplate","showscale","updateDimensions","bind","vals","len","sort","a","b","range","p20","floor","toString","p40","p60","p80","currentState","method","rowObj","Z","startsWith","j","indexOf","gdpColorscale","getIndustryName","indID","includes","substring","indIDs","INDUSTRY_ID","backgroundColor","addEventListener","queryZ","innerWidth","removeEventListener","nextProps","prevProps","geojson","locations","text","location","points","layout","geo","scope","autosize","margin","t","dragmode","responsive","years","y_str","YearDropdown","selectedYear","handleChange","e","target","handleYearChange","forceUpdate","for","name","onChange","CmpDropdown","operators","selectedOp","selected","handleOpChange","CmpInput","filterLabel","handleValChange","VariableDropdown","vars","selectedVar","includeCategorical","handleVarChange","FilterCheckbox","checked","reverse","handleFilterChange","Map","handleClick","electionYears","nextVar","nextYear","errorMsg","nextFilter","nextFilterVar","nextFilterYear","filterVar","op","nextOp","nextVal","nextIndustry","handleFilterYearChange","handleFilterVarChange","newVar","Number","substr","newFilter","newOp","newVal","Graph","Trends","App","basename","path","exact","component","render","to","Boolean","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6abe669b.chunk.js","sourcesContent":["export const PLACEHOLDER_GDP_DATA = Array(18).fill(0);\r\nexport const PLACEHOLDER_TOP_INDUSTRY = Array.from({length: 5}).fill({\"Description\": \"\", \"GDP\": 0});\r\nexport const PLACEHOLDER_GROWING_INDUSTRY = Array.from({length: 5}).fill({\"Description\": \"\", \"Growth\": \"0\"});\r\nexport const PLACEHOLDER_ELECTION_RESULT = [\r\n    {\r\n        \"Year\": 2016, \"DemCandidate\": \"Hillary Clinton\",\r\n        \"RepCandidate\": \"Donald Trump\", \"DemVote\": 0, \"RepVote\": 0, \"TotalVote\": 0\r\n    },\r\n    {\r\n        \"Year\": 2012, \"DemCandidate\": \"Barack Obama\",\r\n        \"RepCandidate\": \"Mitt Romney\", \"DemVote\": 0, \"RepVote\": 0, \"TotalVote\": 0\r\n    },\r\n    {\r\n        \"Year\": 2008, \"DemCandidate\": \"Barack Obama\",\r\n        \"RepCandidate\": \"John McCain\", \"DemVote\": 0, \"RepVote\": 0, \"TotalVote\": 0\r\n    },\r\n    {\r\n        \"Year\": 2004, \"DemCandidate\": \"John Kerry\",\r\n        \"RepCandidate\": \"George W. Bush\", \"DemVote\": 0, \"RepVote\": 0, \"TotalVote\": 0\r\n    },\r\n    {\r\n        \"Year\": 2000, \"DemCandidate\": \"Al Gore\",\r\n        \"RepCandidate\": \"George W. Bush\", \"DemVote\": 0, \"RepVote\": 0, \"TotalVote\": 0\r\n    },\r\n];\r\nexport const PLACEHOLDER_STATE_GDP_RANK = \"N/A\";\r\nexport const PLACEHOLDER_GDP_GROWTH_PERCENTILE = \"N/A\";\r\nexport const PLACEHOLDER_COUNTY_VOTING_FOR_PARTY = \"\";\r\nexport const PLACEHOLDER_NUM_COUNTY_IN_STATE = 0;\r\nexport const PLACEHOLDER_COUNTY_NAME = \"County\";\r\nexport const PLACEHOLDER_COUNTY_STATE= \"State\";\r\n\r\nexport const CANDIDATE_IMAGE = {\r\n    \"Donald Trump\": \"donald_trump.jpg\",\r\n    \"Hillary Clinton\": \"hillary_clinton.jpg\",\r\n    \"Barack Obama\": \"barack_obama.jpg\",\r\n    \"Mitt Romney\": \"mitt_romney.jpg\",\r\n    \"John McCain\": \"john_mccain.jpg\",\r\n    \"John Kerry\": \"john_kerry.jpg\",\r\n    \"George W. Bush\": \"george_bush.jpg\",\r\n    \"Al Gore\": \"al_gore.jpg\",\r\n}\r\nexport const INDUSTRY_ICON = {\r\n    \"Agriculture, forestry, fishing and hunting\": \"industry_02.png\",\r\n    \"Mining, quarrying, and oil and gas extraction\": \"industry_03.png\",\r\n    \"Utilities\": \"industry_04.png\",\r\n    \"Construction\": \"industry_05.png\",\r\n    \"Durable goods manufacturing\": \"industry_07.png\",\r\n    \"Nondurable goods manufacturing\": \"industry_08.png\",\r\n    \"Wholesale trade\": \"industry_09.png\",\r\n    \"Retail trade\": \"industry_10.png\",\r\n    \"Transportation and warehousing\": \"industry_11.png\",\r\n    \"Information\": \"industry_12.png\",\r\n    \"Finance and insurance\": \"industry_14.png\",\r\n    \"Real estate and rental and leasing\": \"industry_15.png\",\r\n    \"Professional, scientific, and technical services\": \"industry_17.png\",\r\n    \"Management of companies and enterprises\": \"industry_18.png\",\r\n    \"Administrative and support and waste management and remediation services\": \"industry_19.png\",\r\n    \"Educational services\": \"industry_21.png\",\r\n    \"Health care and social assistance\": \"industry_22.png\",\r\n    \"Arts, entertainment, and recreation\": \"industry_24.png\",\r\n    \"Accommodation and food services\": \"industry_25.png\",\r\n    \"Other services (except government and government enterprises)\": \"industry_26.png\",\r\n    \"Government and government enterprises\": \"industry_27.png\",\r\n}\r\nexport const STATES = [\r\n    \"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\",\r\n    \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\",\r\n    \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\",\r\n];\r\n","import React from 'react';\n\nfunction Navbar() {\n  const navStyle = {\n    top: 0,\n    width: \"100%\",\n    background: \"#cc0000\",\n    padding: 15,\n    textAlign: 'center'\n  }\n\n  const linkStyle = {\n    padding: 20,\n    fontSize: 24,\n    color: \"white\"\n  }\n\n  return (\n    <nav className=\"Navbar\" style={navStyle} id=\"navbar\">\n      <a href={process.env.PUBLIC_URL + \"/map\"} style={linkStyle}>Map</a>\n      <a href={process.env.PUBLIC_URL + \"/graph\"} style={linkStyle}>Graph</a>\n      <a href={process.env.PUBLIC_URL + \"/trends\"} style={linkStyle}>Trends</a>\n      <a href={process.env.PUBLIC_URL + \"/county\"} style={linkStyle}>County Details</a>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\r\nimport Chart from \"react-google-charts\";\r\nimport './County.css'\r\n// import {INDUSTRY_ICON} from \"./Constants\";\r\n\r\nexport default class EconomyPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        let gdpData = this.props.gdpData;\r\n        let topIndustry = this.props.topIndustry;\r\n        let fastestGrowthIndustry = this.props.fastestGrowthIndustry;\r\n        let growthChartData = [\r\n            [\r\n                {type: 'string', label: 'Year'},\r\n                {type: 'number', label: 'Growth'},\r\n            ],\r\n        ]\r\n        for (let i = 1; i < gdpData.length; i++) {\r\n            growthChartData.push([(2001 + i) + \"\", 100 * ((gdpData[i] / gdpData[i - 1]) - 1)]);\r\n        }\r\n\r\n        return (\r\n            <div className={\"col-sm economy-panel\"}>\r\n                <div className={\"economy-panel-title\"}>\r\n                    Economy\r\n                </div>\r\n\r\n                <div className={\"econ-tile-container\"}>\r\n                    <div className={\"econ-subpanel-title\"} style={{textAlign: \"left\", paddingBottom: \"3vh\"}}>Overview\r\n                    </div>\r\n                    <table className={\"econ-tile-table\"}>\r\n                        <thead>\r\n                        <tr>\r\n                            <td className={\"econ-tile-title\"}>{\"GDP\\n\\n(2018)\"}</td>\r\n                            <td className={\"econ-tile-separator\"}/>\r\n                            <td className={\"econ-tile-title\"}>{\"Avg. Annual Growth\\n(2001-2018)\"}</td>\r\n                            <td className={\"econ-tile-separator\"}/>\r\n                            <td className={\"econ-tile-title\"}>{\"Top Industry\"}</td>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td id={\"total-gdp-number\"} className={\"econ-tile\"}>\r\n                                {gdpData[0] === 0 ? \"N/A\" :\r\n                                    '$' + (gdpData[gdpData.length - 1] / 1E6).toFixed(1) + ' bn'\r\n                                }\r\n                            </td>\r\n                            <td/>\r\n                            <td id={\"gdp-cagr-number\"} className={\"econ-tile\"}>{\r\n                                gdpData[0] === 0 ? \"N/A\" :\r\n                                    (100 * (Math.pow((gdpData[gdpData.length - 1] / gdpData[0]), 1 / (gdpData.length)) - 1)).toFixed(2) + '%'\r\n                            }\r\n                            </td>\r\n                            <td/>\r\n                            <td className={\"econ-tile\"}>\r\n                                {topIndustry[0][\"Description\"] === \"\" ? null :\r\n                                <img\r\n                                    className={\"econ-tile-image\"}\r\n                                    alt={topIndustry[0][\"Description\"]}\r\n                                />\r\n                                }\r\n                                <div id={\"top-industry-image-caption\"} className={\"econ-tile-image-caption\"}>\r\n                                    {topIndustry[0][\"Description\"]}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>&nbsp;</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className={\"econ-tile-title\"}>{\"State GDP Rank\"}</td>\r\n                            <td className={\"econ-tile-separator\"}/>\r\n                            <td className={\"econ-tile-title\"}>{\"Avg. Annual Growth National Percentile\"}</td>\r\n                            <td className={\"econ-tile-separator\"}/>\r\n                            <td className={\"econ-tile-title\"}>{\"Fastest Growing Industry\"}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td id={\"state-gdp-rank\"} className={\"econ-tile\"}>\r\n                                {gdpData[0] === 0 ? \"N/A\" : this.props.stateGDPRank}\r\n                            </td>\r\n                            <td/>\r\n                            <td id={\"gdp-growth-percentile\"} className={\"econ-tile\"}>\r\n                                {gdpData[0] === 0 ? \"N/A\" : this.props.GDPGrowthPercentile}\r\n                            </td>\r\n                            <td/>\r\n                            <td className={\"econ-tile\"}>\r\n                                { fastestGrowthIndustry[0][\"Description\"] === \"\" ? null :\r\n                                <img className={\"econ-tile-image\"}\r\n                                     alt={fastestGrowthIndustry[0][\"Description\"]}\r\n                                />\r\n                                }\r\n                                <div id={\"growing-industry-image-caption\"} className={\"econ-tile-image-caption\"}>\r\n                                    {fastestGrowthIndustry[0][\"Description\"]}\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div id={\"gdp-growth-chart\"}>\r\n                    <div className={\"econ-subpanel-title\"}>GDP Growth</div>\r\n                    <Chart\r\n                        chartType=\"LineChart\"\r\n                        loader={<div>Loading Chart</div>}\r\n                        data={growthChartData}\r\n                        options={{legend: 'none', vAxis: {title: '% YoY'},}}\r\n                    />\r\n                </div>\r\n\r\n                <div className={\"econ-subpanel-container\"}>\r\n                    <div className={\"econ-subpanel-title\"}>Top 5 Industries</div>\r\n                    <table className={\"econ-subpanel-table\"}>\r\n                        <colgroup>\r\n                            <col style={{width: \"20%\"}}/>\r\n                            <col style={{width: \"60%\"}}/>\r\n                            <col style={{width: \"10%\"}}/>\r\n                        </colgroup>\r\n                        <thead>\r\n                        <tr>\r\n                            <td/>\r\n                            <td/>\r\n                            <td className={\"econ-subpanel-table-pct-header\"}><b>%GDP</b></td>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {topIndustry.map((value, index) => {\r\n                            // make maxIndustryPct occupy at most 90% max-width\r\n                            let rescale_factor = 0.9;\r\n                            let maxIndustryPct = gdpData[gdpData.length - 1] === 0 ? 0 :\r\n                                topIndustry[0][\"GDP\"] / gdpData[gdpData.length - 1] * 100;\r\n                            let pct = gdpData[gdpData.length - 1] === 0 ? 0 :\r\n                                value[\"GDP\"] / gdpData[gdpData.length - 1] * 100;\r\n\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>\r\n                                        <div>\r\n                                            { value[\"Description\"] === \"\" ? null :\r\n                                                <img className={\"econ-subpanel-table-image\"}\r\n                                                     alt={value[\"Description\"]}\r\n                                                />\r\n                                            }\r\n                                            <p id={`top-gdp-desc-${index}`} className={\"econ-subpanel-table-image-caption\"}>\r\n                                                {value[\"Description\"]}\r\n                                            </p>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td className={\"econ-subpanel-table-bar-container\"}>\r\n                                        <div className={\"econ-subpanel-table-bar top-gdp-bar\"}\r\n                                             style={{\r\n                                                 width: maxIndustryPct === 0 ? 0 :\r\n                                                     rescale_factor * Math.max(0, Math.round(pct / maxIndustryPct * 100))\r\n                                                     + '%'\r\n                                             }}>\r\n                                            &nbsp;\r\n                                        </div>\r\n                                    </td>\r\n                                    <td id={`top-gdp-value-${index}`}>\r\n                                        {maxIndustryPct === 0 ? null : pct.toFixed(1)}\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div className={\"econ-subpanel-container\"}>\r\n                    <div className={\"econ-subpanel-title\"}>Fastest Growing Industries</div>\r\n                    <table className={\"econ-subpanel-table\"}>\r\n                        <colgroup>\r\n                            <col style={{width: \"20%\"}}/>\r\n                            <col style={{width: \"60%\"}}/>\r\n                            <col style={{width: \"10%\"}}/>\r\n                        </colgroup>\r\n                        <thead>\r\n                        <tr>\r\n                            <td/>\r\n                            <td/>\r\n                            <td className={\"econ-subpanel-table-pct\"}><b>%</b></td>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {fastestGrowthIndustry.map((value, index) => {\r\n                            // make maxGrowthPct occupy at most 90% max-width\r\n                            let rescale_factor = 0.9;\r\n                            let maxGrowthPct = parseFloat(fastestGrowthIndustry[0][\"Growth\"]);\r\n                            let pct = parseFloat(value[\"Growth\"]);\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>\r\n                                        <div>\r\n                                            { value[\"Description\"] === \"\" ? null :\r\n                                                <img className={\"econ-subpanel-table-image\"}\r\n                                                     alt={value[\"Description\"]}\r\n                                                />\r\n                                            }\r\n                                            <p id={`growing-industry-desc-${index}`} className={\"econ-subpanel-table-image-caption\"}>\r\n                                                {value[\"Description\"]}\r\n                                            </p>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td className={\"econ-subpanel-table-bar-container\"}>\r\n                                        <div className={\"econ-subpanel-table-bar growing-industries-bar\"}\r\n                                             style={{\r\n                                                 width: maxGrowthPct === 0 ? 0 :\r\n                                                     rescale_factor * Math.max(0, Math.round(pct / maxGrowthPct * 100)) + '%'\r\n                                             }}>\r\n                                            &nbsp;\r\n                                        </div>\r\n                                    </td>\r\n                                    <td id={`growing-industry-value-${index}`}>\r\n                                        {maxGrowthPct === 0 ? null : pct.toFixed(1)}\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Fragment} from \"react\";\r\n// import {CANDIDATE_IMAGE} from \"./Constants\"\r\nimport {getStats, getPartyPreference} from './helper';\r\n\r\nexport default class ElectionPanel extends React.Component {\r\n    render() {\r\n        let electionResult = this.props.electionResult;\r\n        let preference = getPartyPreference(electionResult);\r\n        let stats = getStats(electionResult);\r\n\r\n        return (\r\n            <div className={\"col-sm election-panel\"}>\r\n                <div className={\"election-panel-title\"}>\r\n                    Elections\r\n                </div>\r\n                <table className={\"election-table\"}>\r\n                    <tbody>\r\n                    <tr className={\"election-table-year-container\"}>\r\n                        <td style={{textAlign: \"left\"}}><b>Democrats</b></td>\r\n                        <td style={{textAlign: \"left\"}}><b>Lean Dem</b></td>\r\n                        <td style={{textAlign: \"center\"}}><b>Swing</b></td>\r\n                        <td style={{textAlign: \"right\"}}><b>Lean Rep</b></td>\r\n                        <td style={{textAlign: \"right\"}}><b>Republican</b></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan={5}\r\n                            style={{backgroundImage: \"linear-gradient(to right, blue, lightblue, lightpink, red)\"}}>\r\n                            &nbsp;\r\n                        </td>\r\n                    </tr>\r\n                    {this.props.electionResult[0][\"TotalVote\"] === 0 ? null :\r\n                        <Fragment>\r\n                            <tr>\r\n                                <td colSpan={\"5\"}>\r\n                                    {/* -3.5% is 0%; 96.5% is 100% */}\r\n                                    <div className=\"arrow-up\"\r\n                                         style={{marginLeft: `${preference - 3.5}%`}}>&nbsp;</div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>&nbsp;</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan={\"5\"} style={{textAlign: \"justify\"}}>\r\n                                    <ul>\r\n                                        <li id={\"elec-points-0\"}>{stats[\"WinnerParty\"]} candidates\r\n                                            won {stats[\"WinnerCount\"]} out of the\r\n                                            last 5 general elections\r\n                                            in {this.props.countyName} County, {this.props.countyState}.\r\n                                        </li>\r\n                                        <li id={\"elec-points-1\"}>The {stats[\"WinnerParty\"]} winners, on average, lead\r\n                                            by {stats[\"WinnerLead\"].toFixed(1)} percentage point.\r\n                                        </li>\r\n                                        <li id={\"elec-points-2\"}>{stats[\"LastNumVotes\"]} in {this.props.countyName} County\r\n                                            voted\r\n                                            2016 election,\r\n                                            a {(stats[\"NumVoteChangePct2012\"]).toFixed(1)}% {stats[\"NumVoteChangePct2012\"] > 0 ? 'increase' : 'decrease'} to\r\n                                            that of\r\n                                            2012,\r\n                                            a {(stats[\"NumVoteChangePct2001\"]).toFixed(1)}% {stats[\"NumVoteChangePct2001\"] > 0 ? 'increase' : 'decrease'} to\r\n                                            that of\r\n                                            2001.\r\n                                        </li>\r\n                                        {this.props.countyVotingForParty.length - 1 === 0 ?\r\n                                            <li id={\"elec-points-3\"}>\r\n                                                {this.props.countyName} County is the only county\r\n                                                (out of {this.props.numCountyInState}) in {this.props.countyState} where\r\n                                                the {stats[\"WinnerParty\"]} candidate won.\r\n                                            </li>\r\n                                            :\r\n                                            <li id={\"elec-points-3\"}>\r\n                                                {this.props.countyName} County\r\n                                                joins {this.props.countyVotingForParty.length - 1} other\r\n                                                counties in {this.props.countyState} that pre-dominantly voted\r\n                                                for {stats[\"WinnerParty\"]} candidate in 2016,\r\n                                                out of the {this.props.numCountyInState} counties in {this.props.countyState}.\r\n                                            </li>\r\n                                        }\r\n                                    </ul>\r\n                                </td>\r\n\r\n                            </tr>\r\n                        </Fragment>\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n                <table className={\"election-table\"}>\r\n                    <tbody>\r\n                    {electionResult.map((value, index) => {\r\n                        let totalVote = parseInt(value[\"TotalVote\"])\r\n                        let demPct = parseInt(value[\"DemVote\"]) * 100 / totalVote;\r\n                        let repPct = parseInt(value[\"RepVote\"]) * 100 / totalVote;\r\n                        let demBarWidth = isNaN(demPct) ? 0 : Math.round(demPct);\r\n                        let repBarWidth = isNaN(repPct) ? 0 : Math.round(repPct);\r\n\r\n                        console.log(demBarWidth, repBarWidth)\r\n\r\n                        return (\r\n                            <Fragment key={index}>\r\n\r\n                                <tr className={\"election-table-year-container\"}>\r\n                                    <td/>\r\n                                    <td className={\"election-table-year\"} colSpan={2}>\r\n                                        <h3>{value[\"Year\"]}</h3></td>\r\n                                    <td/>\r\n                                </tr>\r\n                                <tr className={\"election-table-result-container\"} key={index}>\r\n                                    <td className={\"headshot-container\"}>\r\n                                        <img\r\n                                            alt={value[\"DemCandidate\"]}\r\n                                            className={\"headshot\"}\r\n                                        />\r\n                                        {value[\"DemCandidate\"]}\r\n                                    </td>\r\n                                    <td className={\"democrat-results-container\"}>\r\n                                        {\r\n                                            (totalVote === 0 || demPct < repPct) ? null :\r\n                                                <img\r\n                                                    src=\"https://upload.wikimedia.org/wikipedia/commons/b/bd/Checkmark_green.svg\"\r\n                                                    alt=\"\" className={\"democrat-vote-checkmark\"}\r\n                                                    style={{marginLeft: `${Math.min(77, 100 - demBarWidth + 5)}%`}}\r\n                                                />\r\n                                        }\r\n                                        <div className={\"democrat-vote-bar\"}\r\n                                             style={{marginLeft: `${100 - Math.round(demBarWidth)}%`}}>\r\n                                            &nbsp;\r\n                                        </div>\r\n                                        <div id={`elec-dem-pct-${index}`}>\r\n                                            {(totalVote === 0 ? 0 : demPct.toFixed(1)) + \"%\"}\r\n                                        </div>\r\n                                        <div id={`elec-dem-vote-${index}`}>({value[\"DemVote\"]})</div>\r\n                                    </td>\r\n\r\n                                    <td className={\"republican-results-container\"}>\r\n                                        {(totalVote === 0 || demPct > repPct) ? null :\r\n                                            <img\r\n                                                src=\"https://upload.wikimedia.org/wikipedia/commons/b/bd/Checkmark_green.svg\"\r\n                                                alt=\"\"\r\n                                                className={\"republican-vote-checkmark\"}\r\n                                                style={{marginRight: `${Math.min(77, 100 - repBarWidth)}%`}}\r\n                                            />\r\n                                        }\r\n                                        <div className={\"republican-vote-bar\"} style={{width: repBarWidth + '%'}}>\r\n                                            &nbsp;\r\n                                        </div>\r\n                                        <div id={`elec-rep-pct-${index}`}>\r\n                                            &nbsp; {(totalVote === 0 ? 0 : repPct.toFixed(1)) + \"%\"}\r\n                                        </div>\r\n                                        <div id={`elec-rep-vote-${index}`}\r\n                                        >&nbsp; ({value[\"RepVote\"]})\r\n                                        </div>\r\n                                    </td>\r\n                                    <td className={\"headshot-container\"}>\r\n                                        <img\r\n                                            alt={value[\"RepCandidate\"]}\r\n                                            className={\"headshot\"}/>\r\n                                        {value[\"RepCandidate\"]}\r\n                                    </td>\r\n                                </tr>\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Compute a county's party preference over the last 5 elections\r\n *\r\n * Scale: 0 to 100\r\n *        0   = ALL votes goes to Democrats\r\n *        100 = ALL votes goes to Republican\r\n *\r\n * More weight given to more recent elections.\r\n *\r\n * Preference = \\sum_{Election Years} weight_{Year} * \\frac{RepPct_{Year}}{TotalVote_{Year}}\r\n *\r\n * Adjustment:\r\n *   Preference += 10 if Republican won >= 4 of the last 5 elections\r\n *   Preference -= 10 if Democrats won  >= 4 of the last 5 elections\r\n *   Rationale: avoid marking county where one party *always* gather 55~65% votes as 'Swing' county\r\n *\r\n * @param electionResult\r\n * @returns number\r\n */\r\nexport function getPartyPreference(electionResult) {\r\n    let length = electionResult.length;\r\n    if (length !== 5) return 50;\r\n\r\n    let preference = 0;         // weighted avg of # Republican Votes / # Total Vote\r\n    let weight = [0.5, 0.2, 0.2, 0.05, 0.05];  // more weight for more recent elections\r\n    let repWinCount = 0;        // # of election won by Republican\r\n\r\n    // result sorted by most recent first\r\n    electionResult.forEach((value, index) => {\r\n        let totalVote = parseInt(value[\"TotalVote\"])\r\n        let repPct = parseInt(value[\"RepVote\"]) * 100 / totalVote;\r\n        repWinCount += repPct > 50 ? 1 : 0;\r\n        preference += (repPct * weight[index]);\r\n    });\r\n\r\n    // bonus 10pp if either party won 4 or more of the last 5 elections\r\n    if (repWinCount >= 4) preference = Math.min(100, preference + 10)\r\n    if (repWinCount <= 2) preference = Math.max(0, preference - 10)\r\n    return preference;\r\n}\r\n\r\n\r\n/**\r\n * Compute basic election stats\r\n *\r\n * @param electionResult\r\n * @returns {{WinnerLead: number, WinnerParty: string, WinnerCount: number, LastNumVotes: number, NumVoteChangePct2001: number, NumVoteChangePct2012: number}}\r\n */\r\nexport function getStats(electionResult) {\r\n    let repWinCount = 0;\r\n    let demWinCount = 0;\r\n    let demWinLead = 0;\r\n    let repWinLead = 0;\r\n    let totalVote2001 = 0;\r\n    let totalVote2012 = 0;\r\n    let totalVote2016 = 0;\r\n\r\n    electionResult.forEach((value, index) => {\r\n        const totalVote = parseInt(value[\"TotalVote\"])\r\n        let demPct = parseInt(value[\"DemVote\"]) * 100 / totalVote;\r\n        let repPct = parseInt(value[\"RepVote\"]) * 100 / totalVote;\r\n\r\n        if (repPct > demPct) {\r\n            repWinCount += 1\r\n            repWinLead += repPct - demPct\r\n        } else {\r\n            demWinCount += 1\r\n            demWinLead += demPct - repPct\r\n        }\r\n        if (index === 0) totalVote2016 = totalVote;\r\n        if (index === 3) totalVote2012 = totalVote;\r\n        if (index === 4) totalVote2001 = totalVote;\r\n    });\r\n    return {\r\n        \"WinnerParty\": (repWinCount >= 3 ? 'Republican' : 'Democratic'),\r\n        \"WinnerCount\": (repWinCount >= 3 ? repWinCount : 5 - repWinCount),\r\n        \"WinnerLead\": (repWinCount >= 3 ? repWinLead / repWinCount : demWinLead / demWinCount),\r\n        \"LastNumVotes\": totalVote2016,\r\n        \"NumVoteChangePct2001\": 100 * ((totalVote2016 / totalVote2001) - 1),\r\n        \"NumVoteChangePct2012\": 100 * ((totalVote2012 / totalVote2001) - 1),\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport {ENDPOINT} from \"./County\";\r\nimport {STATES} from './Constants'\r\n\r\nexport default class CountyFinder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counties: []\r\n        }\r\n    }\r\n\r\n    ERR = (err) => {\r\n        console.log(err)\r\n    };\r\n\r\n    getCounties = (state) => {\r\n        fetch(ENDPOINT.concat(`/counties?state=${state}`))\r\n            .then(res => {\r\n                return res.json();\r\n            }, this.ERR)\r\n            .then(rows => {\r\n                if (rows === undefined || rows === null || rows.length === 0) {\r\n                    this.setState({counties: []});\r\n                } else {\r\n                    let fipsNameList = rows.map((county, index) => {\r\n                        return (\r\n                            <div\r\n                                id={`btn-county-${county.NAME}`}\r\n                                className={\"btn btn-county\"}\r\n                                key={index}\r\n                                onClick={() => this.props.getNewCounty(county.FIPS)}>\r\n                                {county.NAME}\r\n                            </div>);\r\n                    })\r\n                    this.setState({counties: fipsNameList});\r\n                }\r\n            }, this.ERR)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"county-finder container\"}>\r\n                <div id={\"county-finder\"} className={\"row\"}>\r\n                    <h2><b>Find a county:</b></h2>\r\n                </div>\r\n                <div className={\"row\"}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr id={\"county-finder-state-container\"}>\r\n                            <td><b>State</b></td>\r\n                            <td>\r\n                                {\r\n                                    STATES.map((state, index) => {\r\n                                        return (\r\n                                            <div className={\"btn btn-state\"} key={index}\r\n                                                 onClick={() => this.getCounties(state)}\r\n                                                 id={`btn-state-${state}`}>\r\n                                                {state}\r\n                                            </div>);\r\n                                    })\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                        {this.state.counties.length === 0 ? null :\r\n                            <tr id={\"county-finder-state-container\"}>\r\n                                <td><b>County</b></td>\r\n                                <td>\r\n                                    {this.state.counties}\r\n                                </td>\r\n                            </tr>\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Fragment} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './County.css'\r\nimport EconomyPanel from \"./EconomyPanel\";\r\nimport ElectionPanel from \"./ElectionPanel\";\r\nimport CountyFinder from \"./CountyFinder\";\r\n\r\nconst C = require('./Constants')\r\nrequire('dotenv').config()\r\n\r\nconst API_HOST = process.env.REACT_APP_API_HOST || \"localhost\";\r\nconst API_PORT = process.env.REACT_APP_API_PORT || 5000;\r\n\r\nexport const ENDPOINT = `http://${API_HOST}:${API_PORT}/api/v1/county`;\r\n\r\nexport default class County extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            countyName: C.PLACEHOLDER_COUNTY_NAME,\r\n            countyState: C.PLACEHOLDER_COUNTY_STATE,\r\n            gdpData: C.PLACEHOLDER_GDP_DATA,\r\n            growingIndustry: C.PLACEHOLDER_GROWING_INDUSTRY,\r\n            topIndustry: C.PLACEHOLDER_TOP_INDUSTRY,\r\n            electionResult: C.PLACEHOLDER_ELECTION_RESULT,\r\n            GDPGrowthPercentile: C.PLACEHOLDER_GDP_GROWTH_PERCENTILE,\r\n            stateGDPRank: C.PLACEHOLDER_STATE_GDP_RANK,\r\n            countyVotingForParty: C.PLACEHOLDER_COUNTY_VOTING_FOR_PARTY,\r\n            numCountyInState: C.PLACEHOLDER_NUM_COUNTY_IN_STATE,\r\n        }\r\n        document.title = 'County Details'\r\n    }\r\n\r\n    componentDidMount () {\r\n        if (this.props.match !== undefined && this.props.match.params.fips !== undefined){\r\n            this.getNewCounty(this.props.match.params.fips)\r\n        }\r\n    }\r\n\r\n    getNewCounty = (fips) => {\r\n        let ERR_HANDLER = (err) => {\r\n            console.log(err)\r\n        };\r\n\r\n        // Get county name, state\r\n        fetch(ENDPOINT.concat(`/counties?fips=${fips}`))\r\n            .then(res => {\r\n                return res.json();\r\n            }, ERR_HANDLER)\r\n            .then(row => {\r\n                if (row === undefined || row === null || row.length === 0) {\r\n                    // revert to default data\r\n                    this.setState({countyName: C.PLACEHOLDER_COUNTY_NAME,\r\n                        countyState: C.PLACEHOLDER_COUNTY_STATE});\r\n                    document.title = `County Details`;\r\n                } else {\r\n                    this.setState({countyName: row[0][\"NAME\"], countyState: row[0][\"STATE\"]})\r\n                    window.history.pushState({}, null, process.env.PUBLIC_URL + `/county/${fips}`);\r\n                    document.getElementById(\"county-profile\").scrollIntoView();\r\n                }\r\n                document.title = `${this.state.countyName}, ${this.state.countyState} - County Details`\r\n            });\r\n\r\n        // Get county elections result\r\n        fetch(ENDPOINT.concat(`/elections?fips=${fips}`))\r\n            .then(res => {\r\n                return res.json();\r\n            }, ERR_HANDLER)\r\n            .then(row => {\r\n                if (row === undefined || row === null || row.length === 0) {\r\n                    // revert to default data\r\n                    this.setState({electionResult: C.PLACEHOLDER_ELECTION_RESULT});\r\n                } else {\r\n                    let data = [];\r\n                    for (let i of [...Array(row.length / 2).keys()]) {\r\n                        let d_dem = row[i * 2];\r\n                        let d_rep = row[i * 2 + 1];\r\n                        data.push(\r\n                            {\r\n                                \"Year\": d_dem[\"YEAR\"],\r\n                                \"DemCandidate\": d_dem[\"CANDIDATE_NAME\"],\r\n                                \"RepCandidate\": d_rep[\"CANDIDATE_NAME\"],\r\n                                \"DemVote\": d_dem[\"CANDIDATE_VOTES\"],\r\n                                \"RepVote\": d_rep[\"CANDIDATE_VOTES\"],\r\n                                \"TotalVote\": d_dem[\"TOTAL_VOTES\"]      // same as d_rep[\"TOTAL_VOTES\"]\r\n                            }\r\n                        );\r\n                    }\r\n                    this.setState({electionResult: data});\r\n                }\r\n            });\r\n\r\n        // Get county's yearly gdp (all industries)\r\n        fetch(ENDPOINT.concat(`/annual-gdp?fips=${fips}`))\r\n            .then(res => {\r\n                return res.json();\r\n            }, ERR_HANDLER)\r\n            .then(row => {\r\n                if (row === undefined || row === null || row.length === 0) {\r\n                    // revert to default data\r\n                    this.setState({gdpData: C.PLACEHOLDER_GDP_DATA});\r\n                } else {\r\n                    let data = [];\r\n                    for (let i of [...Array(row.length).keys()]) {\r\n                        data.push(row[i][\"GDP\"])\r\n                    }\r\n                    this.setState({gdpData: data});\r\n                }\r\n            });\r\n\r\n        // Get top 5 industries by size in 2018\r\n        fetch(ENDPOINT.concat(`/top-industry?fips=${fips}`))\r\n            .then(res => {\r\n                return res.json();\r\n            }, ERR_HANDLER)\r\n            .then(row => {\r\n                if (row === undefined || row === null || row.length === 0) {\r\n                    // revert to default data\r\n                    this.setState({topIndustry: C.PLACEHOLDER_TOP_INDUSTRY});\r\n                } else {\r\n                    let data = [];\r\n                    for (let i of [...Array(row.length).keys()]) {\r\n                        data.push({\"Description\": row[i][\"Description\"], \"GDP\": row[i][\"GDP\"]})\r\n                    }\r\n                    this.setState({topIndustry: data});\r\n                }\r\n            });\r\n\r\n        // Get top 5 industries by 2001-2018 CAGR\r\n        fetch(ENDPOINT.concat(`/growing-industry?fips=${fips}`))\r\n            .then(res => {\r\n                return res.json();\r\n            }, this.ERR)\r\n            .then(row => {\r\n                if (row === undefined || row === null || row.length === 0) {\r\n                    // revert to default data\r\n                    this.setState({growingIndustry: C.PLACEHOLDER_GROWING_INDUSTRY});\r\n                } else {\r\n                    let data = [];\r\n                    for (let i of [...Array(row.length).keys()]) {\r\n                        data.push({\"Description\": row[i][\"Description\"], \"Growth\": row[i][\"Growth\"]})\r\n                    }\r\n                    this.setState({growingIndustry: data});\r\n                }\r\n            });\r\n\r\n        // Get county's avg. GDP growth national percentile (among counties)\r\n        fetch(ENDPOINT.concat(`/gdp-growth-percentile?fips=${fips}`))\r\n            .then(res => {\r\n                return res.json();\r\n            }, this.ERR)\r\n            .then(row => {\r\n                if (row === undefined || row === null || row.length === 0) {\r\n                    // revert to default data\r\n                    this.setState({GDPGrowthPercentile: C.PLACEHOLDER_GDP_GROWTH_PERCENTILE});\r\n                } else {\r\n                    let percentile = (row[0][\"PERCENTILE\"] * 100).toFixed(1) + '%';\r\n                    this.setState({GDPGrowthPercentile: percentile});\r\n                }\r\n            });\r\n\r\n        // Get county's GDP rank within the state\r\n        fetch(ENDPOINT.concat(`/state-gdp-rank?fips=${fips}`))\r\n            .then(res => {\r\n                return res.json();\r\n            }, this.ERR)\r\n            .then(row => {\r\n                if (row === undefined || row === null || row.length === 0) {\r\n                    // revert to default data\r\n                    this.setState({stateGDPRank: C.PLACEHOLDER_STATE_GDP_RANK});\r\n                } else {\r\n                    let rank = `${row[0][\"COUNTY_GDP_RANK\"]} / ${row[0][\"STATE_COUNTY_COUNT\"]}`;\r\n                    this.setState({stateGDPRank: rank, numCountyInState: row[0][\"STATE_COUNTY_COUNT\"]});\r\n                }\r\n            });\r\n\r\n        // Get the fips and county name within the same state where\r\n        // the party winning the 2016 election in this county also won in those counties.\r\n        fetch(ENDPOINT.concat(`/county-voting-for-party?fips=${fips}`))\r\n            .then(res => {\r\n                return res.json();\r\n            }, this.ERR)\r\n            .then(row => {\r\n                if (row === undefined || row === null || row.length === 0) {\r\n                    // revert to default data\r\n                    this.setState({countyVotingForParty: C.PLACEHOLDER_COUNTY_VOTING_FOR_PARTY});\r\n                } else {\r\n                    this.setState({countyVotingForParty: row});\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <CountyFinder getNewCounty={this.getNewCounty}/>\r\n                <div id={\"county-profile\"}/>\r\n                {this.state.countyName === C.PLACEHOLDER_COUNTY_NAME ? null :\r\n                    <div id={\"county-details\"} className={\"container\"}>\r\n                        <div id={\"county-name-container\"}>\r\n                            <h1 id={\"county-name\"}>\r\n                                {this.state.countyName === \"\" ? \"County Name, State\" :\r\n                                    `${this.state.countyName}, ${this.state.countyState}`}\r\n                            </h1>\r\n                        </div>\r\n                        <div className={\"panel-container container\"}>\r\n                            <div className={\"row\"}>\r\n                                <EconomyPanel\r\n                                    gdpData={this.state.gdpData}\r\n                                    topIndustry={this.state.topIndustry}\r\n                                    fastestGrowthIndustry={this.state.growingIndustry}\r\n                                    GDPGrowthPercentile={this.state.GDPGrowthPercentile}\r\n                                    stateGDPRank={this.state.stateGDPRank}\r\n                                />\r\n                                <ElectionPanel electionResult={this.state.electionResult}\r\n                                               countyVotingForParty={this.state.countyVotingForParty}\r\n                                               countyName={this.state.countyName}\r\n                                               countyState={this.state.countyState}\r\n                                               numCountyInState={this.state.numCountyInState}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </Fragment>\r\n        );\r\n    }\r\n};\r\n","import React from 'react';\r\nimport './Map.css';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nimport Plotly from 'plotly.js/lib/core';\r\nimport {ENDPOINT} from './Map';\r\n\r\nPlotly.register([\r\n  require('plotly.js/lib/choropleth')\r\n]);\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nexport default class Choropleth extends React.Component {\r\n  // create state info in constructor\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fips: [],\r\n      names: [],\r\n      z: [],\r\n      industries: [],\r\n      nonAggregateIndustries: [],\r\n      nonAggregateIndIDs: [],\r\n      topIndustryColorbar: [],\r\n      customdata: [],\r\n      colorscale: '',\r\n      title: '',\r\n      zmin: 0,\r\n      zmax: 0,\r\n      zauto: true,\r\n      width: 0,\r\n      height: 0,\r\n      year: props.year,\r\n      queryURL: props.queryURL,\r\n      filter: props.filter,\r\n      filterYear: props.filterYear,\r\n      operand: props.operand,\r\n      val: props.val,\r\n      industry: props.industry,\r\n      hovertemplate: '',\r\n      showscale: true\r\n    };\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n  }\r\n\r\n  // responsive colorscale used for plotting GDP variables\r\n  gdpColorscale(z) {\r\n    let vals = [];\r\n    let len = z.length;\r\n    for (let i = 0; i < len; i++) {\r\n      if (typeof z[i] === 'number') {\r\n        vals.push(z[i]);\r\n      }\r\n    }\r\n    vals.sort((a, b) => {return (a - b)});\r\n    len = vals.length;\r\n    let min = vals[0];\r\n    let max = vals[len-1];\r\n    let range = max - min;\r\n    let p20 = vals[Math.floor(0.2 * len) - 1];\r\n    p20 = ((p20 - min) / range).toString();\r\n    let p40 = vals[Math.floor(0.4 * len) - 1];\r\n    p40 = ((p40 - min) / range).toString();\r\n    let p60 = vals[Math.floor(0.6 * len) - 1];\r\n    p60 = ((p60 - min) / range).toString();\r\n    let p80 = vals[Math.floor(0.8 * len) - 1];\r\n    p80 = ((p80 - min) / range).toString();\r\n    return [\r\n      ['0.0', '#0000ff'],\r\n      [p20, '#00ffff'],\r\n      [p40, '#00ff00'],\r\n      [p60, '#ffff00'],\r\n      [p80, '#ff0000'],\r\n      ['1.0', '#ff00ff']\r\n    ];\r\n  }\r\n\r\n  // colorscale used for top industry query\r\n  topIndustryColorscale = [\r\n    ['0.0', 'forestgreen'],\r\n    ['0.05', 'dimgray'],\r\n    ['0.1', 'aquamarine'],\r\n    ['0.15', 'goldenrod'],\r\n    ['0.2', 'blue'],\r\n    ['0.25', 'mediumslateblue'],\r\n    ['0.3', 'yellow'],\r\n    ['0.35', 'darkcyan'],\r\n    ['0.4', 'deepskyblue'],\r\n    ['0.45', 'darkviolet'],\r\n    ['0.5', 'deeppink'],\r\n    ['0.55', 'lawngreen'],\r\n    ['0.6', 'lightcoral'],\r\n    ['0.65', 'maroon'],\r\n    ['0.7', 'midnightblue'],\r\n    ['0.75', 'wheat'],\r\n    ['0.8', 'orangered'],\r\n    ['0.85', 'orchid'],\r\n    ['0.9', 'silver'],\r\n    ['0.95', 'darkorange'],\r\n    ['1.0', 'red']\r\n  ];\r\n\r\n  // query the specified URL and update state accordingly\r\n  queryZ() {\r\n    let queryURL = this.state.queryURL + '?year=' + this.state.year +\r\n      '&filter=' + this.state.filter + '&filteryear=' + this.state.filterYear +\r\n      '&operand=' + this.state.operand + '&val=' + this.state.val +\r\n      '&industry=' + this.state.industry;\r\n    let currentState = this.state;\r\n    let customdata = [];\r\n    fetch(ENDPOINT.concat(queryURL),\r\n    {\r\n      method: 'GET'\r\n    }).then(res => {\r\n      return res.json();\r\n    }, err => {\r\n      console.log(err);\r\n    }).then(row => {\r\n      if (!row) return;\r\n      let z = row.map((rowObj, i) => rowObj.Z);\r\n      if (queryURL.startsWith('/top-industry')) {\r\n        for (let j = 0; j < z.length; j++) {\r\n          customdata.push(this.state.nonAggregateIndustries[this.state.nonAggregateIndIDs.indexOf(z[j])]);\r\n          if (z[j] !== null) {\r\n            z[j] = this.state.nonAggregateIndIDs.indexOf(z[j]);\r\n          }\r\n        }\r\n      } else {\r\n        customdata = currentState.customdata;\r\n      }\r\n      let gdpColorscale = this.gdpColorscale(z);\r\n      // make sure query matches curretn selection; if not, abort\r\n      if ((currentState !== this.state) && (this.state.z.length > 0)) {\r\n        return;\r\n      }\r\n      // update state with query results\r\n      else if (queryURL.startsWith('/rep-dem-diff')) {\r\n        this.setState({\r\n          colorscale: 'RdBu',\r\n          title: '% Republican votes - % Democrat votes in ' + this.state.year,\r\n          zmin: -100,\r\n          zmax: 100,\r\n          zauto: false,\r\n          hovertemplate: '<b>%{text}</b><br>%{z}<extra></extra>',\r\n          showscale: true,\r\n          z: z,\r\n          customdata: customdata\r\n        });\r\n      } else if (queryURL.startsWith('/rep-votes')) {\r\n        this.setState({\r\n          colorscale: [['0.0', 'white'], ['1.0', 'red']],\r\n          title: '% Republican votes in ' + this.state.year,\r\n          zmin: 0,\r\n          zmax: 100,\r\n          zauto: false,\r\n          hovertemplate: '<b>%{text}</b><br>%{z}<extra></extra>',\r\n          showscale: true,\r\n          z: z,\r\n          customdata: customdata\r\n        });\r\n      } else if (queryURL.startsWith('/dem-votes')) {\r\n        this.setState({\r\n          colorscale: [['0.0', 'white'], ['1.0', 'blue']],\r\n          title: '% Democrat votes in ' + this.state.year,\r\n          zmin: 0,\r\n          zmax: 100,\r\n          zauto: false,\r\n          hovertemplate: '<b>%{text}</b><br>%{z}<extra></extra>',\r\n          showscale: true,\r\n          z: z,\r\n          customdata: customdata\r\n        });\r\n      } else if (queryURL.startsWith('/other-votes')) {\r\n        this.setState({\r\n          colorscale: [['0.0', 'white'], ['1.0', 'green']],\r\n          title: '% Other votes in ' + this.state.year,\r\n          zmin: 0,\r\n          zmax: 100,\r\n          zauto: true,\r\n          hovertemplate: '<b>%{text}</b><br>%{z}<extra></extra>',\r\n          showscale: true,\r\n          z: z,\r\n          customdata: customdata\r\n        });\r\n      } else if (queryURL.startsWith('/total-gdp')) {\r\n        this.setState({\r\n          colorscale: gdpColorscale,\r\n          title: 'Total GDP (millions of dollars) in ' + this.state.year,\r\n          zmin: 0,\r\n          zmax: 100,\r\n          zauto: true,\r\n          hovertemplate: '<b>%{text}</b><br>%{z}<extra></extra>',\r\n          showscale: true,\r\n          z: z,\r\n          customdata: customdata\r\n        });\r\n      } else if (queryURL.startsWith('/industry-gdp')) {\r\n        this.setState({\r\n          colorscale: gdpColorscale,\r\n          title: '% GDP from ' + this.getIndustryName(this.state.industry) + ' in ' + this.state.year,\r\n          zmin: 0,\r\n          zmax: 100,\r\n          zauto: true,\r\n          hovertemplate: '<b>%{text}</b><br>%{z}<extra></extra>',\r\n          showscale: true,\r\n          z: z,\r\n          customdata: customdata\r\n        });\r\n      } else if (queryURL.startsWith('/top-industry')) {\r\n        this.setState({\r\n          colorscale: this.topIndustryColorscale,\r\n          title: 'Top Industry (non-aggregate) in ' + this.state.year,\r\n          zmin: 0,\r\n          zmax: 20,\r\n          zauto: false,\r\n          hovertemplate: '<b>%{text}</b><br>%{customdata}<extra></extra>',\r\n          showscale: false,\r\n          z: z,\r\n          customdata: customdata\r\n        });\r\n      }\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  // get the name of the industry with the specified id\r\n  getIndustryName(indID) {\r\n    return this.state.industries[indID-1];\r\n  }\r\n\r\n  componentDidMount() {\r\n    // get names and fips for all counties and store in state\r\n    fetch(ENDPOINT.concat(`/counties`),\r\n    {\r\n      method: 'GET'\r\n    }).then(res => {\r\n      return res.json();\r\n    }, err => {\r\n      console.log(err);\r\n    }).then(row => {\r\n      if (!row) return;\r\n      let fips = row.map((rowObj, i) => rowObj.FIPS);\r\n      let names = row.map((rowObj, i) => rowObj.NAME);\r\n      this.setState({\r\n        fips: fips,\r\n        names: names,\r\n        customdata: fips\r\n      });\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n\r\n    // get names and IDs for all industries and store in state\r\n    fetch(ENDPOINT.concat(`/industries`),\r\n    {\r\n      method: 'GET'\r\n    }).then(res => {\r\n      return res.json();\r\n    }, err => {\r\n      console.log(err);\r\n    }).then(row => {\r\n      if (!row) return;\r\n      let industries = row.map((rowObj, i) => rowObj.NAME);\r\n      let i;\r\n      for (i = 0; i < industries.length; i++) {\r\n        if (industries[i].includes('2/')) {\r\n          industries[i] = industries[i].substring(0, industries[i].indexOf('2/'));\r\n        } else if (industries[i].includes('3/')) {\r\n          industries[i] = industries[i].substring(0, industries[i].indexOf('3/'));\r\n        }\r\n      }\r\n      this.setState({\r\n        industries: industries\r\n      })\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n\r\n    // get names and IDs for all non-aggregate industries and store in state\r\n    fetch(ENDPOINT.concat(`/non-aggregate-industries`),\r\n    {\r\n      method: 'GET'\r\n    }).then(res => {\r\n      return res.json();\r\n    }, err => {\r\n      console.log(err);\r\n    }).then(row => {\r\n      if (!row) return;\r\n      let industries = row.map((rowObj, i) => rowObj.NAME);\r\n      let indIDs = row.map((rowObj, i) => rowObj.INDUSTRY_ID);\r\n      let i;\r\n      let topIndustryColorbar = [];\r\n      for (i = 0; i < industries.length; i++) {\r\n        if (industries[i].includes('2/')) {\r\n          industries[i] = industries[i].substring(0, industries[i].indexOf('2/'));\r\n        } else if (industries[i].includes('3/')) {\r\n          industries[i] = industries[i].substring(0, industries[i].indexOf('3/'));\r\n        }\r\n        topIndustryColorbar.push(\r\n          <div className='colorbarBox'>\r\n            <div className='colorBox' style={{backgroundColor: this.topIndustryColorscale[i][1]}}></div>\r\n            <p className='colorbarLabel'>{industries[i]}</p>\r\n          </div>\r\n        );\r\n      }\r\n      this.setState({\r\n        nonAggregateIndustries: industries,\r\n        nonAggregateIndIDs: indIDs,\r\n        topIndustryColorbar: topIndustryColorbar\r\n      });\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n\r\n    // set dimensions of graph based on window size, and add event listener in case of window resize\r\n    this.updateDimensions();\r\n    window.addEventListener('resize', this.updateDimensions);\r\n\r\n    // execute default query\r\n    this.queryZ();\r\n  }\r\n\r\n  // update dimensions of map when window resized\r\n  updateDimensions() {\r\n  let width = Math.min(window.innerWidth * 0.9, 1400);\r\n    let height = width / 2;\r\n    this.setState({\r\n      width: width,\r\n      height: height\r\n    });\r\n  }\r\n\r\n  // remove event listener on unmount\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateDimensions);\r\n  }\r\n\r\n  // update graph when new info received from parent component\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({\r\n      year: nextProps.year,\r\n      queryURL: nextProps.queryURL,\r\n      filter: nextProps.filter,\r\n      filterYear: nextProps.filterYear,\r\n      operand: nextProps.operand,\r\n      val: nextProps.val,\r\n      industry: nextProps.industry\r\n    });\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props === prevProps) {\r\n      return;\r\n    }\r\n    this.queryZ();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='choroplethWrap'>\r\n      <Plot\r\n      id = 'choropleth'\r\n      data = {[{\r\n        type: \"choropleth\",\r\n        geojson: \"https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json\",\r\n        locations: this.state.fips,\r\n        z: this.state.z,\r\n        text: this.state.names,\r\n        colorscale: this.state.colorscale,\r\n        zmin: this.state.zmin,\r\n        zmax: this.state.zmax,\r\n        zauto: this.state.zauto,\r\n        hovertemplate: this.state.hovertemplate,\r\n        customdata: this.state.customdata,\r\n        showscale: this.state.showscale\r\n      }]}\r\n      onClick = {(data) => { window.location.href = process.env.PUBLIC_URL + '/county/' + data.points[0].location + '#county-profile'; }}\r\n      layout = {{\r\n        geo: {scope: 'usa'},\r\n        width: this.state.width,\r\n        height: this.state.height,\r\n        autosize: true,\r\n        margin: {t: 0, b: 0},\r\n        title: {text: this.state.title, y: 0.95},\r\n        dragmode: false\r\n      }}\r\n      config = {{responsive: true}}\r\n      />\r\n      {this.state.showscale\r\n        ? <div></div>\r\n        : <div id='colorbar'>{this.state.topIndustryColorbar}</div>\r\n      }\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n","import React from 'react';\r\n\r\nlet years = [];\r\n\r\nlet y;\r\nfor (y = 2000; y <= 2018; y++) {\r\n  let y_str = y.toString();\r\n  years.push(<option value={y_str}>{y_str}</option>);\r\n}\r\n\r\nexport default class YearDropdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      years: [],\r\n      selectedYear: '2016'\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  // add years to dropdown\r\n  componentDidMount() {\r\n    this.setState({\r\n      years: years\r\n    });\r\n  }\r\n\r\n  // handle change in state\r\n  handleChange(e) {\r\n    this.setState({\r\n      selectedYear: e.target.value\r\n    });\r\n    this.props.handleYearChange(e.target.value);\r\n  }\r\n\r\n  // force update when props change\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props === prevProps) {\r\n      return;\r\n    }\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='dropdown'>\r\n        <label for='years'>Year: </label>\r\n        <select name='years' value={this.state.selectedYear} onChange={this.handleChange}>\r\n          {this.state.years}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CmpDropdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      operators: [],\r\n      selectedOp: 'gt'\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  // add operators to dropdown\r\n  componentDidMount() {\r\n    var operators = [];\r\n    operators.push(<option value='gt' selected>&gt;</option>);\r\n    operators.push(<option value='lt'>&lt;</option>);\r\n    this.setState({\r\n      operators: operators\r\n    });\r\n  }\r\n\r\n  // handle change in state\r\n  handleChange(e) {\r\n    this.setState({\r\n      selectedOp: e.target.value\r\n    });\r\n    this.props.handleOpChange(e.target.value);\r\n  }\r\n\r\n  // force update when props change\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props === prevProps) {\r\n      return;\r\n    }\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='dropdown'>\r\n        <label for='operators'>Comparison: </label>\r\n        <select name='operators' value={this.state.selectedOp} onChange={this.handleChange}>\r\n          {this.state.operators}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CmpInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      val: 0,\r\n      filterLabel: '%'\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  // handle change in state\r\n  handleChange(e) {\r\n    this.setState({\r\n      val: e.target.value\r\n    });\r\n    this.props.handleValChange(e.target.value);\r\n  }\r\n\r\n  // update graph when new info received from parent component\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({\r\n      filterLabel: nextProps.filterLabel\r\n    });\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props === prevProps) {\r\n      return;\r\n    }\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='cmp-dropdown'>\r\n        <input type='number' min='-9999999' max='-9999999' name='cmp-input' value={this.state.val} onChange={this.handleChange}/>\r\n        <label for='cmp-input'>{this.state.filterLabel}</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {ENDPOINT} from './Map';\r\n\r\nexport default class VariableDropdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      vars: [],\r\n      selectedVar: 'RepDemDiff'\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  // add variables to dropdown\r\n  componentDidMount() {\r\n    var vars = [];\r\n    vars.push(<option value='RepDemDiff' selected>% Republican votes - % Democrat votes</option>);\r\n    vars.push(<option value='Democrat'>% votes for Democrat</option>);\r\n    vars.push(<option value='Republican'>% votes for Republican</option>);\r\n    vars.push(<option value='Other'>% votes for Other</option>);\r\n    vars.push(<option value='TotalGDP'>Total GDP</option>);\r\n    if (this.props.includeCategorical) {\r\n      vars.push(<option value='TopIndustry'>Top Industry (non-aggregate)</option>);\r\n    }\r\n    fetch(ENDPOINT.concat(`/industries`),\r\n    {\r\n      method: 'GET'\r\n    }).then(res => {\r\n      return res.json();\r\n    }, err => {\r\n      console.log(err);\r\n    }).then(row => {\r\n      if (!row) return;\r\n      let industries = row.map((rowObj, i) => rowObj.NAME);\r\n      let indIDs = row.map((rowObj, i) => rowObj.INDUSTRY_ID);\r\n      let i;\r\n      for (i = 0; i < industries.length; i++) {\r\n        if (industries[i].includes('2/')) {\r\n          industries[i] = industries[i].substring(0, industries[i].indexOf('2/'));\r\n        } else if (industries[i].includes('3/')) {\r\n          industries[i] = industries[i].substring(0, industries[i].indexOf('3/'));\r\n        }\r\n        vars.push(<option value={'Industry' + indIDs[i]}>% GDP from {industries[i]}</option>);\r\n      }\r\n      this.setState({\r\n        vars: vars\r\n      })\r\n    }, err => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  // handle change in state\r\n  handleChange(e) {\r\n    this.setState({\r\n      selectedVar: e.target.value\r\n    });\r\n    this.props.handleVarChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='dropdown'>\r\n        <label for='vars'>Variable: </label>\r\n        <select name='vars' value={this.state.selectedVar} onChange={this.handleChange}>\r\n          {this.state.vars}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class FilterCheckbox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checked: false\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  // handle change in state\r\n  handleChange(e) {\r\n    let reverse = !(this.state.checked);\r\n    this.setState({\r\n      checked: reverse\r\n    });\r\n    this.props.handleFilterChange(reverse);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='checkbox'>\r\n        <label for='filter'>Filter</label>\r\n        <input type='checkbox' name='filter' value='Filter' checked={this.state.checked} onChange={this.handleChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './Map.css';\nimport Choropleth from './Choropleth';\nimport YearDropdown from './YearDropdown';\nimport CmpDropdown from './CmpDropdown';\nimport CmpInput from './CmpInput';\nimport VariableDropdown from './VariableDropdown';\nimport FilterCheckbox from './FilterCheckbox';\nrequire('dotenv').config()\n\nconst API_HOST = process.env.REACT_APP_API_HOST || \"localhost\";\nconst API_PORT = process.env.REACT_APP_API_PORT || 5000;\n\nexport const ENDPOINT = `http://${API_HOST}:${API_PORT}/api/v1/map`;\n\nexport default class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    document.title = 'Map';\n    this.state = {\n      year: '2016',\n      nextYear: '2016',\n      queryURL: '/rep-dem-diff',\n      nextVar: '',\n      filter: false,\n      nextFilter: false,\n      filterYear: '2016',\n      nextFilterYear: '2016',\n      filterVar: 'none',\n      nextFilterVar: 'RepDemDiff',\n      filterLabel: '%',\n      op: 'gt',\n      nextOp: 'gt',\n      val: 0,\n      nextVal: 0,\n      industry: 1,\n      nextIndustry: 1,\n      errorMsg: ''\n    }\n    this.handleYearChange = this.handleYearChange.bind(this);\n    this.handleVarChange = this.handleVarChange.bind(this);\n    this.handleFilterYearChange = this.handleFilterYearChange.bind(this);\n    this.handleFilterVarChange = this.handleFilterVarChange.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleOpChange = this.handleOpChange.bind(this);\n    this.handleValChange = this.handleValChange.bind(this);\n  }\n\n  // handle state change in year dropdown\n  handleYearChange(year) {\n    this.setState({\n      nextYear: year\n    });\n  }\n\n  // handle state change in variable drowdown\n  handleVarChange(newVar) {\n    this.setState({\n      nextVar: newVar\n    });\n    if (newVar.startsWith('Industry')) {\n      let indID = Number(newVar.substr(8));\n      this.setState({\n        nextIndustry: indID\n      });\n    }\n  }\n\n  // handle state change in filter checkbox\n  handleFilterChange(newFilter) {\n    this.setState({\n      nextFilter: newFilter\n    });\n  }\n\n  // handle state change in operand\n  handleOpChange(newOp) {\n    this.setState({\n      nextOp: newOp\n    });\n  }\n\n  // handle state change in comparison value\n  handleValChange(newVal) {\n    this.setState({\n      nextVal: newVal\n    });\n  }\n\n  // handle state change in filter year dropdown\n  handleFilterYearChange(year) {\n    this.setState({\n      nextFilterYear: year\n    });\n  }\n\n  // handle state change in filter variable drowdown\n  handleFilterVarChange(newVar) {\n    this.setState({\n      nextFilterVar: newVar\n    });\n    if (newVar === 'TotalGDP') {\n      this.setState({\n        filterLabel: 'million dollars'\n      });\n    } else {\n      this.setState({\n        filterLabel: '%'\n      });\n    }\n  }\n\n  // when submit button is clicked, update state in order to re-render map\n  handleClick = () => {\n    let electionYears = ['2000', '2004', '2008', '2012', '2016'];\n    if ((this.state.nextVar === 'TotalGDP') || (this.state.nextVar.includes('Industry'))) {\n      if (this.state.nextYear === '2000') {\n        this.setState({\n          errorMsg: 'GDP data is not available for the year 2000'\n        });\n        return;\n      }\n    } else {\n      if (!electionYears.includes(this.state.nextYear)) {\n        this.setState({\n          errorMsg: 'Election data is not available for the year ' + this.state.nextYear\n        });\n        return;\n      }\n    }\n    if (this.state.nextFilter) {\n      if ((this.state.nextFilterVar === 'TotalGDP') || (this.state.nextFilterVar.includes('Industry'))) {\n        if (this.state.nextFilterYear === '2000') {\n          this.setState({\n            errorMsg: 'GDP data is not available for the year 2000'\n          });\n          return;\n        }\n      } else {\n        if (!electionYears.includes(this.state.nextFilterYear)) {\n          this.setState({\n            errorMsg: 'Election data is not available for the year ' + this.state.nextFilterYear\n          });\n          return;\n        }\n      }\n    }\n    let queryURL = this.state.queryURL;\n    if (this.state.nextVar === 'Democrat') {\n      queryURL = '/dem-votes';\n    } else if (this.state.nextVar === 'Republican') {\n      queryURL = '/rep-votes';\n    } else if (this.state.nextVar === 'Other') {\n      queryURL = '/other-votes';\n    } else if (this.state.nextVar === 'RepDemDiff') {\n      queryURL = '/rep-dem-diff';\n    } else if (this.state.nextVar === 'TotalGDP') {\n      queryURL = '/total-gdp';\n    } else if (this.state.nextVar.startsWith('Industry')) {\n      queryURL = '/industry-gdp';\n    }\n    else if (this.state.nextVar === 'TopIndustry') {\n      queryURL = '/top-industry';\n    }\n    if (this.state.nextFilter) {\n      this.setState({\n        year: this.state.nextYear,\n        filter: this.state.nextFilter,\n        filterYear: this.state.nextFilterYear,\n        filterVar: this.state.nextFilterVar,\n        op: this.state.nextOp,\n        val: this.state.nextVal,\n        queryURL: queryURL,\n        industry: this.state.nextIndustry,\n        errorMsg: ''\n      });\n    } else {\n      this.setState({\n        year: this.state.nextYear,\n        filter: this.state.nextFilter,\n        filterYear: this.state.nextFilterYear,\n        filterVar: 'none',\n        op: this.state.nextOp,\n        val: this.state.nextVal,\n        queryURL: queryURL,\n        industry: this.state.nextIndustry,\n        errorMsg: ''\n      });\n    }\n  };\n\n\n  render() {\n    return (\n      <div className='map'>\n        <Choropleth\n          year={this.state.year}\n          filter={this.state.filterVar}\n          filterYear={this.state.filterYear}\n          operand={this.state.op}\n          val={this.state.val}\n          queryURL={this.state.queryURL}\n          industry={this.state.industry}\n        />\n        <p className='error'>{this.state.errorMsg}</p>\n        <p>Select a year and variable, then click \"Submit\" to update the map.</p>\n        <section className='selector'>\n          <YearDropdown\n            id='year-dropdown'\n            handleYearChange={this.handleYearChange}\n          />\n          <VariableDropdown\n            id='variable-dropdown'\n            handleVarChange={this.handleVarChange}\n            includeCategorical={true}\n          />\n          <button id='submit' onClick={this.handleClick}>Submit</button>\n        </section>\n        <p>Optional: select a filter variable and year. If selected, only those counties that meet the stated condition will be mapped.</p>\n        <section className='filter'>\n          <FilterCheckbox\n            id='filter'\n            checked={this.state.filter}\n            handleFilterChange={this.handleFilterChange}\n          />\n          <YearDropdown\n            id='filter-year-dropdown'\n            handleYearChange={this.handleFilterYearChange}\n          />\n          <VariableDropdown\n            id='filter-variable-dropdown'\n            handleVarChange={this.handleFilterVarChange}\n          />\n          <CmpDropdown\n            id='cmp-dropdown'\n            handleOpChange={this.handleOpChange}\n          />\n          <CmpInput\n            id='cmp-input'\n            handleValChange={this.handleValChange}\n            filterLabel={this.state.filterLabel}\n          />\n        </section>\n        <p>Note: Election data is only available for election years (2000, 2004, 2008, 2012, and 2016). GDP data is not available for the year 2000.</p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nfunction Graph() {\n  return (\n    <h1>Graph</h1>\n  );\n}\n\nexport default Graph;\n","import React from 'react';\n\nfunction Trends() {\n  return (\n    <h1>Trends</h1>\n  );\n}\n\nexport default Trends;\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Navbar from './Navbar';\r\nimport County from './County/County';\r\nimport Map from './Map/Map';\r\nimport Graph from './Graph';\r\nimport Trends from './Trends';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Navbar />\r\n        <div id=\"main\">\r\n          <Switch>\r\n            <Route path=\"/map\" exact component={() => <Map />} />\r\n            <Route path=\"/graph\" exact component={() => <Graph />} />\r\n            <Route path=\"/trends\" exact component={() => <Trends />} />\r\n            <Route path=\"/county/:fips\" component={(props) => <County {...props}/>} />\r\n            <Route path=\"/county/\" component={(props) => <County {...props}/>} />\r\n            <Route render={() => <Redirect to=\"/map\" />} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}